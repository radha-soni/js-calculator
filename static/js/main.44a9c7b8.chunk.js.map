{"version":3,"sources":["Components/Calc.js","App.js","serviceWorker.js","index.js"],"names":["Calc","props","state","value","result","showResult","handleButtonClick","bind","clearInput","handleResult","handleBackClick","val","this","setState","length","match","pop","concat","myString","join","replace","split","i","includes","index","indexOf","left","right","Number","splice","id","className","onClick","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44a9c7b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Calc.css\";\r\nclass Calc extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: [],\r\n      result: 0,\r\n      showResult: false\r\n    };\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    this.clearInput = this.clearInput.bind(this);\r\n    this.handleResult = this.handleResult.bind(this);\r\n    this.handleBackClick = this.handleBackClick.bind(this);\r\n  }\r\n\r\n  handleButtonClick(val) {\r\n    if (this.state.showResult) {\r\n      this.setState({\r\n        value: [],\r\n        result: 0,\r\n        showResult: false\r\n      });\r\n    }\r\n    if (this.state.value.length > 22) {\r\n      this.setState({\r\n        value: \"DATA LIMIT EXCEEDED\"\r\n      });\r\n    } else {\r\n      if (\r\n        this.state.value[this.state.value.length - 1] &&\r\n        this.state.value[this.state.value.length - 1].match(/\\D/) &&\r\n        val.match(/\\D/)\r\n      ) {\r\n        this.state.value.pop();\r\n      }\r\n      this.setState(state => {\r\n        const value = state.value.concat(val);\r\n        return {\r\n          value\r\n        };\r\n      });\r\n    }\r\n  }\r\n  handleBackClick() {\r\n    this.setState(state => {\r\n      state.value.pop();\r\n      return { value: state.value };\r\n    });\r\n  }\r\n\r\n  clearInput() {\r\n    this.setState({\r\n      showResult: false,\r\n      value: []\r\n    });\r\n  }\r\n  handleResult() {\r\n    let myString = this.state.value.join(\"\");\r\n\r\n    myString = myString.replace(/(\\+|-|\\*|\\/)/g, \" $1 \").split(\" \");\r\n    var result;\r\n    for (let i = 1; i < myString.length; i++) {\r\n      if (myString.includes(\"/\")) {\r\n        let index = myString.indexOf(\"/\");\r\n        let left = myString[index - 1];\r\n        let right = myString[index + 1];\r\n        result = Number(left) / Number(right);\r\n        myString.splice(index - 1, 3, result);\r\n        i = index;\r\n      }\r\n    }\r\n    for (let i = 1; i < myString.length; i++) {\r\n      if (myString.includes(\"*\")) {\r\n        let index = myString.indexOf(\"*\");\r\n        let left = myString[index - 1];\r\n        let right = myString[index + 1];\r\n        result = Number(left) * Number(right);\r\n        myString.splice(index - 1, 3, result);\r\n        i = index;\r\n      }\r\n    }\r\n    for (let i = 1; i < myString.length; i++) {\r\n      if (myString.includes(\"+\")) {\r\n        let index = myString.indexOf(\"+\");\r\n        let left = myString[index - 1];\r\n        let right = myString[index + 1];\r\n        result = Number(left) + Number(right);\r\n        myString.splice(index - 1, 3, result);\r\n        i = index;\r\n      }\r\n    }\r\n    for (let i = 1; i < myString.length; i++) {\r\n      if (myString.includes(\"-\")) {\r\n        let index = myString.indexOf(\"-\");\r\n        let left = myString[index - 1];\r\n        let right = myString[index + 1];\r\n        result = Number(left) - Number(right);\r\n        myString.splice(index - 1, 3, result);\r\n        i = index;\r\n      }\r\n    }\r\n    this.setState({\r\n      result,\r\n      showResult: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"calc-container\">\r\n        <div id=\"main-container\">\r\n          <div id=\"get-input\">\r\n            {this.state.showResult ? this.state.result : this.state.value}\r\n          </div>\r\n          <div className=\"btn-container\">\r\n            <div className=\"first-row\">\r\n              <button onClick={this.clearInput} id=\"all-clear\">\r\n                AC\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"/\")}\r\n                className=\"operators\"\r\n                id=\"divide\"\r\n              >\r\n                /\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"*\")}\r\n                className=\"operators\"\r\n                id=\"multiply\"\r\n              >\r\n                x\r\n              </button>\r\n            </div>\r\n            <div className=\"second-row\">\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"7\")}\r\n                id=\"seven\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                7\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"8\")}\r\n                id=\"eight\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                8\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"9\")}\r\n                id=\"nine\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                9\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"-\")}\r\n                className=\"operators\"\r\n                id=\"subtract\"\r\n              >\r\n                -\r\n              </button>\r\n            </div>\r\n            <div className=\"third-row\">\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"4\")}\r\n                id=\"four\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                4\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"5\")}\r\n                id=\"five\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                5\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"6\")}\r\n                id=\"six\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                6\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"+\")}\r\n                className=\"operators\"\r\n                id=\"addition\"\r\n              >\r\n                +\r\n              </button>\r\n            </div>\r\n            <div className=\"fourth-row\">\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"1\")}\r\n                id=\"one\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                1\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"2\")}\r\n                id=\"two\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                2\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\"3\")}\r\n                id=\"three\"\r\n                className=\"same-size-btn\"\r\n              >\r\n                3\r\n              </button>\r\n              <button onClick={this.handleResult} id=\"equals\">\r\n                =\r\n              </button>\r\n            </div>\r\n            <div className=\"fifth-row\">\r\n              <button onClick={() => this.handleButtonClick(\"0\")} id=\"zero\">\r\n                0\r\n              </button>\r\n              <button\r\n                onClick={() => this.handleButtonClick(\".\")}\r\n                className=\"same-size-btn\"\r\n                id=\"decimal\"\r\n              >\r\n                .\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                onClick={() => this.handleBackClick()}\r\n                className=\"back-btn\"\r\n                id=\"back\"\r\n              >\r\n                BACK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Calc;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calc from \"./Components/Calc\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}